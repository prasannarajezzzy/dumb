import os
import logging
from pathlib import Path

from slack_bolt import App
from slack_bolt.adapter.flask import SlackRequestHandler
from slack_sdk.errors import SlackApiError

from flask import Flask, request, Response

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

SLACK_BOT_TOKEN = os.getenv("SLACK_BOT_TOKEN")
SLACK_SIGNING_SECRET = os.getenv("SLACK_SIGNING_SECRET")

if not SLACK_BOT_TOKEN or not SLACK_SIGNING_SECRET:
    logger.error("Slack credentials are not set in the environment variables.")
    exit(1)

app = App(token=SLACK_BOT_TOKEN, signing_secret=SLACK_SIGNING_SECRET)
handler = SlackRequestHandler(app)

MODEL_NAME = "meta-llama/LLaMA"
try:
    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
    model = AutoModelForCausalLM.from_pretrained(MODEL_NAME)
    model.eval()
    logger.info("LLaMA model loaded successfully.")
except Exception as e:
    logger.error(f"Error loading LLaMA model: {e}")
    exit(1)

flask_app = Flask(__name__)

@flask_app.route("/slack/events", methods=["POST"])
def slack_events():
    return handler.handle(request)

@app.event("app_mention")
def handle_app_mention(event, say):
    user = event.get('user')
    text = event.get('text')
    channel = event.get('channel')
    
    prompt = text.split(f"<@{event['bot_id']}>", 1)[-1].strip()
    logger.info(f"Received prompt from user {user}: {prompt}")
    
    try:
        inputs = tokenizer(prompt, return_tensors="pt")
        with torch.no_grad():
            outputs = model.generate(**inputs, max_new_tokens=150)
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        logger.info(f"Generated response: {response}")
    except Exception as e:
        logger.error(f"Error generating response with LLaMA: {e}")
        response = "Sorry, I encountered an error while generating a response."
    
    try:
        say(response)
    except SlackApiError as e:
        logger.error(f"Error sending message: {e.response['error']}")

if __name__ == "__main__":
    flask_app.run(port=3000)
