import os
import logging
from flask import Flask, request, jsonify
from slackeventsapi import SlackEventAdapter
from slack import WebClient
from ollama import chat
from dotenv import load_dotenv
from pathlib import Path


env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


app = Flask(__name__)
slack_event_adapter = SlackEventAdapter(
    os.getenv('SLACK_SIGNING_SECRET'),
    "/slack/events",
    app
)


slack_client = WebClient(token=os.getenv('SLACK_TOKEN'))


try:
    BOT_ID = slack_client.api_call("auth.test")['user_id']
except Exception as e:
    logger.error(f"Error retrieving BOT ID: {e}")
    raise

def generate_response(prompt, model_name="llama3.2"):
    """Generate a response using the specified model."""
    try:
        response = chat(model=model_name, messages=[
            {'role': 'user', 'content': prompt}
        ])
        generated_text = response['message']['content']
        logger.info(f"Generated response: {generated_text}")
        return generated_text
    except Exception as e:
        logger.error(f"Error generating response: {e}")
        return "Sorry, I couldn't process that."

@slack_event_adapter.on('message')
def handle_message(payload):
    """Handle incoming messages from Slack."""
    try:
        print("paylaod",payload)
        event = payload.get('event', {})
        channel_id = event.get('channel')
        user_id = event.get('user')
        text = event.get('text')

        
        if BOT_ID != user_id:
            logger.info(f"Received message: {text} from user: {user_id}")
            response = generate_response(text)
            slack_client.chat_postMessage(channel=channel_id, text=response)
    except Exception as e:
        logger.error(f"Error handling message: {e}")

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint."""
    return jsonify({'status': 'ok'}), 200

if __name__ == "__main__":
    
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_DEBUG', 'false').lower() == 'true'

    logger.info(f"Starting Flask app on port {port}")
    app.run(host='0.0.0.0', port=port, debug=True)
